}
else{
return(list(data_FFT = amplitude, frequency = frequency))
}
}
# Data Stream Demeaning Function - 18th Nov 2021 - Version 1
# Demeaning Function
#' @title Data Stream Demeaner
#' @description The function aims to take a data stream in a vector form and returns the
#' demeaned data for further analysis. In short, the function calculates the mean of the
#' data and element-wise substracts it from the entire vector
#' @param datastream is a vector containing a one dimensional data stream
#' @return The function returns a vector containing the demeaned data stream
#' @export
demeaner <- function(datastream){
# Checking for the Data Format
dimm <- dim(datastream)
if (len(dimm) != 1){
stop(paste("The provided data stream cannot be demeaned since it is not a vector"))
}
# Demeaning the Data Stream
demeaned_datastream <- datastream - mean(datastream)
return(demeaned_datastream)
}
# Returns a list
# freq_comps - A vector of normalized frequency components
# timestamps - A vector of time stamps/points
# frequencystamps - A vector of frequency stamps/points
# spectro_img - A spectrogram plot with desired input parameters
return(list(freq_comps = P, timestamps = t, frequencystamps = f, spectro_img = img))
else{
P <- P
}
#' @param dbON is a Boolean indicating if we want to convert to decibels or NOT
#' @return The function returns a list containing :
#'   \itemize{
#'   \item freq_comps - A vector of normalized frequency components associated with the data stream
#'   \item timestamps - A vector of time stamps/points associated with the data stream spectrogram
#'   \item frequencystamps - A vector of frequency stamps/points associated with the data stream spectrogram
#'   \item spectro_img - A spectrogram plot with desired input parameters for the data stream
#'}
#' @import signal, oce, ggplot
#' @export
spectro <- function(x, n, Fs, window, overlap, dbON){
# Checks on dbON: Can only be 1 or 0
if (dbON != 0 || dbON != 1){
stop(paste("The parameter dbON can only take values 1 or 0"))
}
# Generate Spectrogram
spec <- specgram(x = snd, n = nfft, Fs = fs, window = window, overlap = overlap)
# Get rid of Phase Information
P <- abs(spec$S)
# Normalize
P <- P/max(P)
# Convert to dB if dbON = 1 and Ignore if dbON = 0
if (dbON == 1){
P <- 10*log10(P)
}
else{
P <- P
}
# Config the Time Axis
t <- spec$t
# Config the Frequency Axis
f <- spec$f
# Plot the Spectrogram
img = imagep(x = t,
y = f,
z = t(P),
col = oce.colorsViridis,
ylab = 'Frequency [Hz]',
xlab = 'Time [s]',
drawPalette = T,
decimate = F)
# Returns a list
# freq_comps - A vector of normalized frequency components
# timestamps - A vector of time stamps/points
# frequencystamps - A vector of frequency stamps/points
# spectro_img - A spectrogram plot with desired input parameters
return(list(freq_comps = P, timestamps = t, frequencystamps = f, spectro_img = img))
}
# Frequency Components Decomposition Function using the Fast Fourier Transform (FFT)
datafreq <- function(data, frequencyPoints = 10000){
ts <- tdmsread(data)
ts_data <- ts$datastream
data_fft <- fft(ts_data)
# Ignore the 2nd half, which are complex conjugates of the 1st half,
# and calculate the Mod (magnitude of each complex number)
amplitude <- Mod(data_fft[1:(length(data_fft)/2)])
# Calculate the frequencies
frequency <- seq(0, frequencyPoints, length.out=length(data_fft)/2)
# Plot!
img <- plot(amplitude ~ frequency, t="l")
# Return the Plot of TS data in the Frequency Domain
return(img)
}
# Frequency Components Decomposition Function using the Fast Fourier Transform (FFT)
#' @title Frequency Components Decomposition Function
#' @description The function reads in a TDMS file and generates its Fast Fourier Transform (FFT). For
#' the FFT calculation, we ignore the complex conjugates involved and only consider the Magnitudes of each
#' complex number.
#' @param data is an TDMS file Input
#' @param frequencyPoints corresponds to the number of points for FFT
#' @return The function returns the plot of the TDMS file data signal in the Frequency Domain
#' @import tdmsreader
#' @export
datafreq <- function(data, frequencyPoints = 10000){
ts <- tdmsread(data)
ts_data <- ts$datastream
data_fft <- fft(ts_data)
# Ignore the 2nd half, which are complex conjugates of the 1st half,
# and calculate the Mod (magnitude of each complex number)
amplitude <- Mod(data_fft[1:(length(data_fft)/2)])
# Calculate the frequencies
frequency <- seq(0, frequencyPoints, length.out=length(data_fft)/2)
# Plot!
img <- plot(amplitude ~ frequency, t="l")
# Return the Plot of TS data in the Frequency Domain
return(img)
}
rm(list = ls())
rm(list = ls())
install.packages("signal", dependencies = TRUE)
rm(list = ls())
rm(list = ls())
install.packages("ggplot2", dependencies = TRUE)
rm(list = ls())
library(readTDMS)
install.packages("signal")
rm(list = ls())
library(readTDMS)
#' The destination/folder of the file must be specified and its associated
#' TDMS_Index file must be present in the same folder.
#' @param file_input is an TDMS file Input
#' @return The function returns a list containing:
#' \itemize{
#' \item datastream - A vector of data stream values based on the input TDMS file
#' \item timestamps - A vector of time stamps associated with the datastream based on the input TDMS file
#'}
#' @import tdmsreader
#' @export
tdmsread <- function(file_input){
#library(tdmsreader)
# Read in the TDMS File along with its destination
file_input <- file('tests/file.tdms', 'rb')
# Use the imported tdmsreader library to read the TDMS file
main <- TdmsFile$new(file_input)
# Extracting the First Channel and First Module in the TDMS file
main$read_data(file_input, 0, 1)
# Taking all streams associated with above specified Module and Channel
r <- main$objects[[ "/'Untitled'/'Dev1/ai0'"]]
# Extracting the Time stamps
t <- r$time_track(start = 0, end = 1)
# Extracting the Data stream values
s <- r$data
# Switching OFF function in case the Script runs based off a DAQ system
dev.off()
# Closing the TDMS file
close(f)
# Returns a list
# datastream - A vector of data stream values
# timestamps - A vector of time stamps/points
return(list(datastream = s, timestamps = t))
}
library(tdmsreader)
detach("package:readTDMS", unload = TRUE)
install.packages(c("backports", "brio", "broom", "car", "conquer", "corrplot", "cpp11", "crayon", "credentials", "curl", "data.table", "digest", "fs", "generics", "ggsignif", "glmnet", "glue", "haven", "hms", "isoband", "knitr", "lifecycle", "maps", "maptools", "matrixStats", "memoise", "microbenchmark", "mime", "mvtnorm", "nloptr", "pillar", "pkgbuild", "pkgload", "RcppArmadillo", "readr", "remotes", "rio", "rlang", "rmarkdown", "sessioninfo", "sp", "stringi", "testthat", "TH.data", "tibble", "tidyr", "tinytex", "usethis", "utf8", "withr", "xfun", "xml2"))
rm(list = ls())
library(readTDMS)
rm(list = ls())
library(readTDMS)
rm(list = ls())
library(readTDMS)
usethis::use_vignette("tdms-vignette", "TDMS File Reader and Analyzer")
detach("package:readTDMS", unload = TRUE)
library(readTDMS)
cd
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 100
Fs <- 2000
library(readTDMS)
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 100
Fs <- 2000
ans = spectro(x = data, n = n, Fs = Fs, window = window, overlap = overlap)
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 128
Fs <- 10000
ans = spectro(x = data, n = n, Fs = Fs, window = window, overlap = overlap)
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 128
Fs <- 100000
ans = spectro(x = data, n = n, Fs = Fs, window = window, overlap = overlap)
ans$timestamps
ans$frequencystamps
ans$freq_comps
rm(list = ls())
library(readTDMS)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
ans <- tdmsread(f)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
ans2 <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 2000,  ylim2 = 200)
close(f)
Arr = c(runif(150))
Ans = demeaner(Arr)
Ans = fftprofile(f, frequencyPoints = 10000, 40)
Ans
Ans = fftprofile(f, frequencyPoints = 10000, 40)
f = file('tests/file.tdms', 'rb')
Ans = fftprofile(f, frequencyPoints = 10000, 40)
Ans
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 128
Fs <- 1000
ans = spectro(x = data, n = n, Fs = Fs, window = window, overlap = overlap)
rm(list = ls())
library(readTDMS)
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 128
Fs <- 1000
ans = spectro(x = data, n = n, Fs = Fs, window = window, overlap = overlap)
rm(list = ls())
library(readTDMS)
rm(list = ls())
rm(list = ls())
library(readTDMS)
rm(list = ls())
library(readTDMS)
rm(list = ls())
library(readTDMS)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
ans <- tdmsread(f)
ans$summ
rm(list = ls())
library(readTDMS)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
ans <- tdmsread(f)
ans$datastream
ans$timestamps
ans$summ
library(readTDMS)
f = file('tests/file.tdms', 'rb')
ans2 <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 2000,  ylim2 = 200)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
ans2 <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 10000,  ylim2 = 600)
close(f)
Arr = c(runif(150))
Ans = demeaner(Arr)
Ans.mean
mean(Arr)
mean(Ans)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
Ans = fftprofile(f, frequencyPoints = 10000, 40)
Ans
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 128
Fs <- 1000
ans = spectro(x = data, n = n, Fs = Fs, window = window, overlap = overlap)
rm(list = ls())
rm(list = ls())
rm(list = ls())
rm(list = ls())
library(readTDMS)
rm(list = ls())
library(readTDMS)
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 128
Fs <- 1000
ans = spectro(x = data, n = n, Fs = Fs, window = window, overlap = overlap)
rm(list = ls())
library(readTDMS)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
ans <- tdmsread(f)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
ans2 <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 10000,  ylim2 = 600)
Arr = c(runif(150))
Ans = demeaner(Arr)
mean(Arr)
mean(Ans)
library(readTDMS)
f = file('tests/file.tdms', 'rb')
Ans = fftprofile(f, frequencyPoints = 10000, 40)
Ans
data <- c(runif(10000))
n <- 1024
window <- 256
overlap <- 128
Fs <- 1000
ans = spectro(x = data, n = n, Fs = Fs, window = window, overlap = overlap)
library(readTDMS)
f <- file('tests/file.tdms', 'rb')
f <- file('./tests/file.tdms', 'rb')
f <- file('./tests/file.tdms', 'rb')
library(readTDMS)
f <- file('./tests/file.tdms', 'rb')
f <- file('./data/file.tdms', 'rb')
library(readTDMS)
f <- file('./data/file.tdms', 'rb')
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f)
head(out$datastream, n = 10)
head(out$timestamps, n = 10)
out$summ
out <- tdmsread(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f)
head(out$datastream, n = 10)
head(out$timestamps, n = 10)
out$summ
close(f)
rm(list = ls())
rm(list = ls())
library(readTDMS)
library(readTDMS)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f)
head(out$datastream, n = 10)
head(out$timestamps, n = 10)
out$summ
out$img
close(f)
out <- tdmsread(f, plot = TRUE)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = TRUE)
head(out$datastream, n = 10)
head(out$timestamps, n = 10)
out$summ
out$img
close(f)
out$img
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = TRUE)
head(out$datastream, n = 10)
head(out$timestamps, n = 10)
out$summ
close(f)
out$img
f <- file('./data/file.tdms', 'rb')
freq_out <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 10000, ylim1 = -10, ylim2 = 600)
freq_out$freq_comps
freq_out$frequency
freq_out$img
f <- file('./data/file.tdms', 'rb')
freq_out <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 10000, ylim1 = -10, ylim2 = 600)
head(freq_out$freq_comps, n = 50)
head(freq_out$frequency, n = 50)
freq_out$img
f <- file('./data/file.tdms', 'rb')
freq_out <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 10000, ylim1 = -10, ylim2 = 600)
head(freq_out$freq_comps, n = 50)
head(freq_out$frequency, n = 50)
f <- file('./data/file.tdms', 'rb')
freq_out <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 10000, ylim1 = -10, ylim2 = 600)
head(freq_out$freq_comps, n = 50)
head(freq_out$frequency, n = 50)
close(f)
f <- file('./data/file.tdms', 'rb')
top_freq <- fftprofile(data, frequencyPoints = 10000, n = 25) # Top 25 Frequencies
f <- file('./data/file.tdms', 'rb')
top_freq <- fftprofile(data, frequencyPoints = 10000, n = 25) # Top 25 Frequencies
f <- file('./data/file.tdms', 'rb')
top_freq <- fftprofile(f, frequencyPoints = 10000, n = 25) # Top 25 Frequencies
close(f)
f <- file('./data/file.tdms', 'rb')
top_freq <- fftprofile(f, frequencyPoints = 10000, n = 25) # Top 25 Frequencies
close(f)
rm(list = ls())
library(readTDMS)
library(readTDMS)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = TRUE)
head(out$datastream, n = 50)
head(out$timestamps, n = 50)
out$summ
close(f)
f <- file('./data/file.tdms', 'rb')
freq_out <- datafreq(f, frequencyPoints = 10000, xlim1 = 0, xlim2 = 10000, ylim1 = -10, ylim2 = 600)
head(freq_out$freq_comps, n = 50)
head(freq_out$frequency, n = 50)
close(f)
f <- file('./data/file.tdms', 'rb')
top_freq <- fftprofile(f, frequencyPoints = 10000, n = 25) # Top 25 Frequencies
close(f)
f <- file('./data/file.tdms', 'rb')
top_freq <- fftprofile(f, frequencyPoints = 10000, n = 25) # Top 25 Frequencies
top_freq$ans
f <- file('./data/file.tdms', 'rb')
top_freq <- fftprofile(f, frequencyPoints = 10000, n = 25) # Top 25 Frequencies
top_freq
close(f)
f <- file('./data/file.tdms', 'rb')
top_freq <- fftprofile(f, frequencyPoints = 10000, n = 25) # Top 25 Frequencies
top_freq
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = TRUE)
data <- out$datastream
data_demeaned <- demeaner(data)
mean(data)
mean(data_demeaned)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
data_demeaned <- demeaner(data)
mean(data)
mean(data_demeaned)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs, window = 256, overlap = 128)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
time_freq_out$freq_comps
time_freq_out$timestamps
time_freq_out$frequencystamps
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
head(time_freq_out$freq_comps, n = 50)
head(time_freq_out$timestamps, n = 50)
head(time_freq_out$frequencystamps, n = 50)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
head(time_freq_out$freq_comps, n = 10)
head(time_freq_out$timestamps, n = 10)
head(time_freq_out$frequencystamps, n = 10)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
head(time_freq_out$freq_comps, n = 1)
head(time_freq_out$timestamps, n = 10)
head(time_freq_out$frequencystamps, n = 10)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
time_freq_out$freq_comps[1:10, 1:10]
head(time_freq_out$timestamps, n = 10)
head(time_freq_out$frequencystamps, n = 10)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
time_freq_out$freq_comps[1:5, 1:5]
head(time_freq_out$timestamps, n = 10)
head(time_freq_out$frequencystamps, n = 10)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
time_freq_out$freq_comps[1:5, 1:5]
head(time_freq_out$timestamps, n = 5)
head(time_freq_out$frequencystamps, n = 5)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
time_freq_out$freq_comps[1:5, 1:5]
head(time_freq_out$timestamps, n = 5)
head(time_freq_out$frequencystamps, n = 5)
close(f)
f <- file('./data/file.tdms', 'rb')
out <- tdmsread(f, plot = FALSE)
data <- out$datastream
time_freq_out <- spectro(x = data, n = 1024, Fs = 1000, window = 256, overlap = 128)
time_freq_out$freq_comps[1:5, 1:5]
head(time_freq_out$timestamps, n = 5)
head(time_freq_out$frequencystamps, n = 5)
close(f)
knit_with_parameters("~/readTDMS/vignettes/tdms-vignette.Rmd", encoding = "UTF-8")
rm(list = ls())
library(readTDMS)
rm(list = ls())
